#! /usr/bin/env python3

# Produces a table of filenames x commits, showing where a file was touched.
# Useful for rebasing feature branch into reasonable commits.
# usage:
# git log --name-status --oneline origin/master..  | $0
# git log --name-status --oneline origin/master..  | $0 --html > file.html

# A variant can also be found at https://secure.phabricator.com/P1998

import argparse
import sys


def parse_args():
    usage = \
        '''git log --name-status --oneline origin/master.. | %(prog)s --html > file.html
       git log --name-status --oneline origin/master.. | %(prog)s
'''
    args_parser = argparse.ArgumentParser(
            description='Show nice table to assist cleaning up git commits.',
            usage=usage,
            )

    args_parser.add_argument('-H', '--html', dest='mode', action='store_const',
                             const='html', default='text',
                             help='Output formatted HTML table')
    args_parser.add_argument('-t', '-T', '--text', dest='mode',
                             action='store_const',
                             const='text', default='text',
                             help='Output plain-text table')

    return args_parser, args_parser.parse_args()

def collect_data():
    files = set()
    commits = list()

    class Commit(object):
        def __init__(self, title):
            self.title = title
            self.files = dict()

        def addFile(self, filename, status):
            self.files[filename] = status

    curr_commit = Commit("--dummy--")
    for line in sys.stdin:
        try:
            if line[0] in '0123456789abcdef':
                curr_commit = Commit(line)
                commits.insert(0, curr_commit)
            elif line[0] == 'R':
                v, f1, f2 = line.split('\t')
                f1 = f1.strip()
                f2 = f2.strip()
                curr_commit.addFile(f1, '\u2563')
                curr_commit.addFile(f2, '\u2560')
                files.add(f1)
                files.add(f2)
            else:
                v, f = line.split('\t', 2)
                f = f.strip()
                curr_commit.addFile(f, v)
                files.add(f)
        except:
            print(line)
            raise
    return commits, files

def html_encode(char):
    encoded = {
        '\u2563': '&boxVL;',
        '\u2560': '&boxVR;',
    }
    return encoded.get(char, char)

def output_html(commits, files):
    if sys.stdout.isatty():
        print("Output is set to html, redirect this to file.")
        sys.exit(4)

    CSS = '''
    td {
        border: 1px solid black;
    }
    table {
        border-collapse: collapse;
    }
    tr:hover {
        background-color: salmon;
    }

    td:nth-child(even),
    th.rotate:nth-child(even) > div > span {
        background: #CCC
    }
    th.rotate {
        height: 350px;
    }
    th.rotate > div {
        transform:
            translate(20px, 164px)
            rotate(315deg);
        transform-origin: left;
        width: 30px;
        white-space: nowrap;
    }
    th.rotate > div > span {
        border-bottom: 1px solid black;
        padding: 5px 0;
    }
    tbody th {
        text-align: right;
    }
    tbody td {
        text-align: center;
    }
    '''

    print('<!DOCTYPE html><html><head><style>')
    print(CSS)
    print('</style><title>Rebase table</title></head>')
    print('''
    <body>
    <table>
    <colgroup>''')
    print('<col>')
    print(len(commits) * '<col>')
    print('''</colgroup>
    <thead><tr>
    <th></th>
    ''')
    for c in commits:
        print('<th class="rotate"><div><span>')
        print(c.title)
        print('</span></div></th>')
    print('</tr> </thead><tbody>')

    for f in sorted(files):
        print('<tr>')
        print('<th>%s</th>' % f, end='')
        for c in commits:
            s = c.files.get(f, ' ')
            s = html_encode(s)
            print('<td>%s</td>' % s, end='')
        print('</tr>')

    print('</tbody></table></html>')

def output_text(commits, files):
    name_len = max(len(f) for f in files)

    name_pattern = '%' + str(name_len) + 's'

    # Print header with commit hashes
    print(name_pattern % '', end=' ')
    for c in commits:
        print(c.title[:5], end=' ')
    print()


    for f in sorted(files):
        print(name_pattern % f, end=' ')
        for c in commits:
            s = c.files.get(f, ' ')
            print(f'  {s}  ', end=' ')
        print()


args_parser, args = parse_args()

if sys.stdin.isatty():
    print("\n\t\tstdin is tty, not processing.\n")
    args_parser.print_help()
    sys.exit(1)

commits, files = collect_data()
if args.mode == 'text':
    output_text(commits, files)
elif args.mode == 'html':
    output_html(commits, files)
else:
    print("500 Internal Server Error")
    args_parser.print_help()
    sys.exit(3)
